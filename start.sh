#!/bin/bash

# Script para iniciar o ambiente Airflow via Docker Compose
# Atualizado para garantir a ordem correta de execu√ß√£o
# e evitar problemas de inicializa√ß√£o do banco de dados

# Caminho relativo do arquivo docker-compose.yml
COMPOSE_FILE=infra/docker-compose.yml

# 1. Inicializa o banco de dados do Airflow
# Usa o comando 'run' em vez de 'up' para executar e remover o container de inicializa√ß√£o automaticamente (--rm)
# Isso evita que o terminal fique bloqueado e garante que o processo termine corretamente
echo "Inicializando o banco de dados do Airflow..."
docker compose -f $COMPOSE_FILE run --rm airflow-init

# 2. Sobe os servi√ßos principais do Airflow em segundo plano
# O par√¢metro '-d' (detached) garante que o terminal fique livre ap√≥s o comando
echo "Subindo todos os servi√ßos do Airflow..."
docker compose -f $COMPOSE_FILE up -d airflow-webserver airflow-scheduler airflow-db

# 3. Aguarda alguns segundos para garantir que o webserver esteja inicializado
# (Podemos melhorar no futuro com uma checagem ativa via curl ou healthcheck)
echo "Aguardando o Airflow Webserver inicializar..."
sleep 15

# 4. Cria o usu√°rio admin padr√£o para login na interface
# Se o usu√°rio j√° existir, o comando falha silenciosamente com uma mensagem de aviso
echo "Criando usu√°rio admin padr√£o (se ainda n√£o existir)..."
docker exec airflow_webserver airflow users create \
  --username airflow \
  --firstname Admin \
  --lastname User \
  --role Admin \
  --email airflow@example.com \
  --password airflow || echo "‚ö†Ô∏è  Usu√°rio j√° existe. Pulando cria√ß√£o."

# 5. Mensagem final ao usu√°rio com informa√ß√µes de acesso
echo "---"
echo "‚úÖ Airflow iniciado com sucesso!"
echo "üåê Acesse a interface em: http://localhost:8080"
echo "üîê Login: airflow | Senha: airflow"
echo "---"
